// Generated by gencpp from file armadillo2_bgu/SimplePlaceGoal.msg
// DO NOT EDIT!


#ifndef ARMADILLO2_BGU_MESSAGE_SIMPLEPLACEGOAL_H
#define ARMADILLO2_BGU_MESSAGE_SIMPLEPLACEGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace armadillo2_bgu
{
template <class ContainerAllocator>
struct SimplePlaceGoal_
{
  typedef SimplePlaceGoal_<ContainerAllocator> Type;

  SimplePlaceGoal_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , frame_id()
    , obj_name()
    , h(0.0)
    , w(0.0)  {
    }
  SimplePlaceGoal_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , frame_id(_alloc)
    , obj_name(_alloc)
    , h(0.0)
    , w(0.0)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_id_type;
  _frame_id_type frame_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _obj_name_type;
  _obj_name_type obj_name;

   typedef float _h_type;
  _h_type h;

   typedef float _w_type;
  _w_type w;





  typedef boost::shared_ptr< ::armadillo2_bgu::SimplePlaceGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::armadillo2_bgu::SimplePlaceGoal_<ContainerAllocator> const> ConstPtr;

}; // struct SimplePlaceGoal_

typedef ::armadillo2_bgu::SimplePlaceGoal_<std::allocator<void> > SimplePlaceGoal;

typedef boost::shared_ptr< ::armadillo2_bgu::SimplePlaceGoal > SimplePlaceGoalPtr;
typedef boost::shared_ptr< ::armadillo2_bgu::SimplePlaceGoal const> SimplePlaceGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::armadillo2_bgu::SimplePlaceGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::armadillo2_bgu::SimplePlaceGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace armadillo2_bgu

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'armadillo2_bgu': ['/home/labkinetic/catkin_ws/src/Planning/msg', '/home/labkinetic/catkin_ws/src/Planning/cmake-build-debug/devel/share/armadillo2_bgu/msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::armadillo2_bgu::SimplePlaceGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::armadillo2_bgu::SimplePlaceGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::armadillo2_bgu::SimplePlaceGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::armadillo2_bgu::SimplePlaceGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::armadillo2_bgu::SimplePlaceGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::armadillo2_bgu::SimplePlaceGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::armadillo2_bgu::SimplePlaceGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2d22edab4b78819b4d99d2d3b0eea8b0";
  }

  static const char* value(const ::armadillo2_bgu::SimplePlaceGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2d22edab4b78819bULL;
  static const uint64_t static_value2 = 0x4d99d2d3b0eea8b0ULL;
};

template<class ContainerAllocator>
struct DataType< ::armadillo2_bgu::SimplePlaceGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "armadillo2_bgu/SimplePlaceGoal";
  }

  static const char* value(const ::armadillo2_bgu::SimplePlaceGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::armadillo2_bgu::SimplePlaceGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# goal coordinates\n\
float32 x\n\
float32 y\n\
float32 z\n\
\n\
string frame_id\n\
\n\
# name of goal object\n\
string obj_name\n\
\n\
# height of goal object\n\
float32 h\n\
\n\
# width of goal object\n\
float32 w\n\
\n\
";
  }

  static const char* value(const ::armadillo2_bgu::SimplePlaceGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::armadillo2_bgu::SimplePlaceGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.frame_id);
      stream.next(m.obj_name);
      stream.next(m.h);
      stream.next(m.w);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SimplePlaceGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::armadillo2_bgu::SimplePlaceGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::armadillo2_bgu::SimplePlaceGoal_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame_id);
    s << indent << "obj_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.obj_name);
    s << indent << "h: ";
    Printer<float>::stream(s, indent + "  ", v.h);
    s << indent << "w: ";
    Printer<float>::stream(s, indent + "  ", v.w);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARMADILLO2_BGU_MESSAGE_SIMPLEPLACEGOAL_H
